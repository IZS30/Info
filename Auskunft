import React, { useMemo, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X } from "lucide-react";

// ----------------------------------------------
// Zwei­sprachige Hilfe-Website (DE / AR) – überarbeitet
// Verhalten geändert: Wenn eine Sprache gewählt wird, erscheinen
// alle Themen und die Info-Fenster **nur** in dieser Sprache.
// - Home: DE & AR CTA
// - Topics-Komponente: wiederverwendbar für DE und AR
// - Modal zeigt nur Inhalte der gewählten Sprache
// ----------------------------------------------

const topics = [
  {
    id: 1,
    titleDE: "Thema 1",
    titleAR: "الموضوع الأول",
    infoDE: "Dies ist ein Beispieltext für Thema 1. Hier können später echte Inhalte eingefügt werden.",
    infoAR: "هذا نص مثال للموضوع الأول. يمكن إضافة محتوى حقيقي لاحقاً.",
  },
  {
    id: 2,
    titleDE: "Thema 2",
    titleAR: "الموضوع الثاني",
    infoDE: "Beispielinhalt für Thema 2.",
    infoAR: "محتوى مثالي للموضوع الثاني.",
  },
  {
    id: 3,
    titleDE: "Thema 3",
    titleAR: "الموضوع الثالث",
    infoDE: "Beispielinhalt für Thema 3.",
    infoAR: "محتوى مثالي للموضوع الثالث.",
  },
  {
    id: 4,
    titleDE: "Thema 4",
    titleAR: "الموضوع الرابع",
    infoDE: "Beispielinhalt für Thema 4.",
    infoAR: "محتوى مثالي للموضوع الرابع.",
  },
  {
    id: 5,
    titleDE: "Thema 5",
    titleAR: "الموضوع الخامس",
    infoDE: "Beispielinhalt für Thema 5.",
    infoAR: "محتوى مثالي للموضوع الخامس.",
  },
];

function useStarBackground() {
  return useMemo(() => {
    const dotSize = 1; // px
    const gap = 20; // px
    const color = "rgba(255,255,255,0.9)";
    const bg = `radial-gradient(${color} ${dotSize}px, transparent ${dotSize + 0.1}px)`;
    const size = `${gap}px ${gap}px`;
    return { backgroundImage: bg, backgroundSize: size, backgroundColor: "#000" };
  }, []);
}

const Modal = ({ open, onClose, topic, lang }) => {
  if (!topic) return null;
  const isAR = lang === "ar";
  const title = isAR ? topic.titleAR : topic.titleDE;
  const info = isAR ? topic.infoAR : topic.infoDE;

  return (
    <AnimatePresence>
      {open && (
        <motion.div
          className="fixed inset-0 z-50 flex items-center justify-center p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <div className="absolute inset-0 bg-black/60" onClick={onClose} />
          <motion.div
            className="relative max-w-lg w-full rounded-2xl shadow-2xl p-6"
            style={{ backgroundColor: "#0f3d2e", border: "3px solid #000" }}
            initial={{ scale: 0.9, y: 20, opacity: 0 }}
            animate={{ scale: 1, y: 0, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
          >
            <button
              onClick={onClose}
              className="absolute -top-3 -right-3 bg-white text-black rounded-full p-2 shadow"
              aria-label="Schließen"
            >
              <X className="h-4 w-4" />
            </button>

            <div className="space-y-4 text-white" dir={isAR ? "rtl" : "ltr"}>
              <h3 className="text-xl font-semibold">{title}</h3>
              <p className="text-sm opacity-90 leading-relaxed text-{isAR ? 'right' : 'left'}">{info}</p>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default function App() {
  const stars = useStarBackground();
  const [view, setView] = useState("home"); // 'home' | 'ar' | 'de'
  const [activeTopic, setActiveTopic] = useState(null);
  const [activeLang, setActiveLang] = useState(null); // 'ar' or 'de'

  const openLanguage = (lang) => {
    setActiveLang(lang);
    setView(lang === "ar" ? "ar" : "de");
  };

  return (
    <div className="min-h-screen w-full" style={stars}>
      {view === "home" && <Home onSelect={openLanguage} />}

      {view === "ar" && (
        <Topics
          topics={topics}
          lang="ar"
          onBack={() => {
            setView("home");
            setActiveLang(null);
            setActiveTopic(null);
          }}
          onOpenTopic={(t) => setActiveTopic(t)}
        />
      )}

      {view === "de" && (
        <Topics
          topics={topics}
          lang="de"
          onBack={() => {
            setView("home");
            setActiveLang(null);
            setActiveTopic(null);
          }}
          onOpenTopic={(t) => setActiveTopic(t)}
        />
      )}

      <Modal open={!!activeTopic} onClose={() => setActiveTopic(null)} topic={activeTopic} lang={activeLang} />
    </div>
  );
}

function Home({ onSelect }) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen text-center px-6">
      <header className="mb-10">
        <h1 className="text-white text-3xl md:text-5xl font-bold drop-shadow">Willkommen</h1>
      </header>
      <div className="space-y-8 max-w-xl w-full">
        {/* Deutsch CTA */}
        <div className="flex flex-col items-center gap-4">
          <p className="text-white text-lg md:text-xl">Brauchst du Hilfe auf <span className="font-semibold">Deutsch</span>? – hier klicken</p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => onSelect("de")}
            className="rounded-full px-8 py-8 text-white shadow-2xl"
            style={{ backgroundColor: "#0f3d2e", border: "3px solid #000" }}
          >
            hier klicken
          </motion.button>
        </div>

        {/* Arabisch CTA */}
        <div className="flex flex-col items-center gap-4" dir="rtl">
          <p className="text-white text-lg md:text-xl">
            هل تحتاج إلى مساعدة باللغة <span className="font-semibold">الألمانية</span>? – اضغط هنا
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => onSelect("ar")}
            className="rounded-full px-8 py-8 text-white shadow-2xl"
            style={{ backgroundColor: "#0f3d2e", border: "3px solid #000" }}
          >
            اضغط هنا
          </motion.button>
        </div>
      </div>
      <footer className="mt-12 text-white/60 text-xs">© {new Date().getFullYear()} – Hilfe-Portal</footer>
    </div>
  );
}

function Topics({ topics, lang, onBack, onOpenTopic }) {
  const radius = 160; // px
  const center = { x: 0, y: 0 };
  const positions = topics.map((_, i) => {
    const angle = (i / topics.length) * Math.PI * 2 - Math.PI / 2;
    return {
      x: center.x + radius * Math.cos(angle),
      y: center.y + radius * Math.sin(angle),
    };
  });

  const isAR = lang === "ar";

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-6">
      <div className="w-full max-w-3xl flex items-center justify-between mb-6">
        <button onClick={onBack} className="text-white underline">← Zurück</button>
        <h2 className="text-white text-2xl font-semibold">{isAR ? "اختر موضوعاً" : "Themenübersicht"}</h2>
        <div className="w-16" />
      </div>

      <div className="relative w-full max-w-2xl h-[440px] mx-auto flex items-center justify-center">
        <motion.div
          className="absolute rounded-full"
          style={{ width: 40, height: 40, border: "3px solid #0f3d2e" }}
          animate={{ rotate: 360 }}
          transition={{ duration: 40, repeat: Infinity, ease: "linear" }}
        />

        {topics.map((t, i) => (
          <motion.button
            key={t.id}
            onClick={() => onOpenTopic(t)}
            className="absolute rounded-full text-white font-medium shadow-2xl"
            style={{
              width: 120,
              height: 120,
              left: `calc(50% + ${positions[i].x}px - 60px)`,
              top: `calc(50% + ${positions[i].y}px - 60px)`,
              backgroundColor: "#0f3d2e",
              border: "3px solid #000",
            }}
            initial={{ scale: 0.6, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: i * 0.06, type: "spring", stiffness: 200, damping: 18 }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className={`text-center px-2`} dir={isAR ? "rtl" : "ltr"}>
              <div className="text-base">{isAR ? t.titleAR : t.titleDE}</div>
              {isAR ? <div className="text-sm opacity-80">{/* optional subtitle in AR */}</div> : null}
            </div>
          </motion.button>
        ))}
      </div>
    </div>
  );
}
